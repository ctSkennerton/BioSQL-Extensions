-- Store some basic metadata for a
-- metaproteome database
CREATE TABLE proteome_database(
    proteome_database_id  INTEGER PRIMARY KEY,   -- Internal use only, stores the ID of the proteome database that other tables will refer to
    name                  TEXT,                  -- A human readable name for the database
    description           TEXT                   -- Some freeform text in case you want to write more
);

-- Map the proteins to the particular
-- proteome database, which is just a
-- collection of proteins that are used
-- for searching
CREATE TABLE proteome_database_proteins(
    proteome_database_id  INTEGER,               -- Internal use only, stores the ID of the proteome database
    seqfeature_id         INTEGER                -- Stores the seqfeature ID of all the proteins in this database
);

-- Add in some really basic information about
-- the sample that was loaded onto the
-- mass-spec
CREATE TABLE proteome_sample(
    sample_id             INTEGER PRIMARY KEY,   -- Internal use only, stores the ID of the sample
    name                  TEXT,                  -- The name of the sample
    description           TEXT,                  -- Copout free-text description for writing whatever about the sample
    date                  TEXT                   -- The date when the sample was taken
);

-- This table stores the metadata used to
-- generate a particular 'file.pro.txt'
-- generated by sipros 3.0. This information
-- can all be found in the sipros configuration
-- file
CREATE TABLE proteome_run(
    proteome_run_id       INTEGER PRIMARY KEY,   -- Internal use only, stores the ID of the proteome run
    name                  TEXT,                  -- Give a catchy human readable name for this run
    machine               TEXT,                  -- What machine/type of mass spec was used to generate the raw data
    date                  TEXT,                  -- The date when this run was conducted
    proteome_database_id  INTEGER,               -- The ID of the proteome database
    search_prog           TEXT,                  -- Name of the search program. Redundant will always be sipros
    search_prog_version   TEXT,                  -- Version of the seqrch program used
    search_prog_command   TEXT,                  -- what got typed into the commandline for the search program
    sample_id             INTEGER,               -- The sample that this run was generated from
    fdr                   REAL,                  -- The false detection rate
    min_num_pep           INTEGER,               -- The minimum number of peptides required to call a match
    min_num_uniq_pep      INTEGER,               -- The minimum number of unique peptides required to call a match
    sip                   INTEGER,               -- Was this a sip enrichment run: 1 = yes, 0 = no
    config                BLOB                   -- The config file in its entirity for later reference
);

-- This table essentially corresponds to the
-- the coloumns seen in the file.pro.txt output
-- by sipros 3.0. The only difference is that
-- instead of storing the name of the protein
-- the ID of the seqfeature is recorded and
-- there is an extra field that links to the
-- proteome run
CREATE TABLE proteome_protein_match(
    protein_match_id       INTEGER PRIMARY KEY,  -- Internal ID for this row that can be referenced by other tables
    seqfeature_id          INTEGER,              -- The id of the coresponding seqfeature
    proteome_run_id        INTEGER,              -- The id of the proteome run
    unique_pep_counts      INTEGER,              -- Number of unique peptides in a run
    total_pep_counts       INTEGER,              -- Number of all peptides in a run
    uniq_spec_counts       INTEGER,              -- Number of unique PSM in a run
    total_spec_counts      INTEGER,              -- Number of all PSM in a run
    balanced_spec_counts   FLOAT,                -- Balanced spectrum count in a run
    norm_bal_spec_counts   FLOAT,                -- Normalized Balanced spectrum count in a run
    target_mat             INTEGER,              -- 1 for target match and 0 for decoy match
    enrichment             FLOAT,                -- The SIP enrichment of the protein
    protein_group_id       INTEGER               -- store key to the proteome_protein_group
);

CREATE INDEX prot_prot_match_seqfeat ON proteome_protein_match(seqfeature_id, proteome_run_id);

-- Sipros will group proteins into groups if
-- they all contain the same identified 
-- peptides. This table is used to keep track
-- of that information
CREATE TABLE proteome_protein_group(
    proteome_run_id        INTEGER,             -- Which run does this protein group belong to
    protein_group_id       INTEGER,             -- The ID of this particular protein group
    protein_match_id       INTEGER              -- A reference to the row of proteome_protein_match
);

-- This table is essentially the columns of
-- the file.pep.txt file generated by sipros
-- 3.0. The main difference is that instead
-- of saving the proteins identified as a
-- single string they are moved out into
-- a separate table that allows for
-- one-to-many relationships
CREATE TABLE proteome_peptide_match(
    peptide_match_id       INTEGER PRIMARY KEY,
    proteome_run_id        INTEGER,
    identified_peptide     TEXT,                 -- Identified peptide sequence with potential PTMs and mutations
    parent_charge          INTEGER,              -- Charge state of identified peptide
    original_peptide       TEXT,                 -- Original peptide sequence in the FASTA file
    protein_count          INTEGER,              -- Number of proteins that the peptide can be assigned to
    target_match           INTEGER,              -- 1 for target match and 0 for decoy match
    spectral_count         INTEGER,              -- Number of PSMs in which the peptide is identified
    best_score             FLOAT,                -- The best score of those PSMs
    psm                    TEXT,                 -- List of PSMs for the peptide: FT2_Filename[Scan_Number]
    scan_type              TEXT,                 -- Scan type of those PSMs
    enrichment_ratio       FLOAT                 -- The SIP enrichment of this peptide. Used only in SIP searches
);

CREATE INDEX identified_peptide_match_idx ON proteome_peptide_match (identified_peptide, proteome_run_id);

-- Links the peptides to their matched
-- proteins for a specific proteome run
CREATE TABLE proteome_peptide_protein_match(
    proteome_run_id       INTEGER NOT NULL,     -- Link to the metadata of the particular proteome
    peptide_match_id      INTEGER NOT NULL,     -- Link to the peptide information
    protein_match_id      INTEGER NOT NULL      -- Link to the protein information
);

CREATE INDEX  protein_peptide_match_idx ON proteome_peptide_protein_match(protein_match_id, proteome_run_id);
CREATE INDEX  peptide_protein_match_idx ON proteome_peptide_protein_match(peptide_match_id, proteome_run_id);
